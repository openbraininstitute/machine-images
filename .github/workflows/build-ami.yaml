---
name: Build an AMI
permissions:
  id-token: write
  contents: read
on:
  push:
  workflow_dispatch:
jobs:
  build-ami:
    runs-on: ubuntu-latest
    environment: sandbox-benchmarks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_AMI_DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Upload component definitions
        run: |-
          aws s3 cp --recursive --exclude '*' --include '*yaml' ami/components/ s3://${{ secrets.BUCKET_NAME }}/components/
      - name: Install jq
        run: |-
          sudo apt-get update
          sudo apt-get install -q -y jq
      - name: Read names and versions
        id: versions
        run: |-
          echo "AMI=$(jq -r '.ami' versions.json)" >> $GITHUB_OUTPUT
          echo "CONFIGURE_AMI=$(jq -r '.components."configure-ami"' versions.json)" >> $GITHUB_OUTPUT
          echo "NEURODAMUS_TOOLCHAIN=$(jq -r '.components."neurodamus-toolchain"' versions.json)" >> $GITHUB_OUTPUT
          echo "PACKAGES=$(jq -r '.components.packages' versions.json)" >> $GITHUB_OUTPUT
          echo "SINGULARITY_CE=$(jq -r '.components."singularity-ce"' versions.json)" >> $GITHUB_OUTPUT
      - name: test
        run: |-
          echo "Building AMI ${{ steps.versions.outputs.AMI }}"
          echo "Building component CONFIGURE_AMI ${{ steps.versions.outputs.CONFIGURE_AMI }}"
          echo "Building component NEURODAMUS_TOOLCHAIN ${{ steps.versions.outputs.NEURODAMUS_TOOLCHAIN }}"
          echo "Building component PACKAGES ${{ steps.versions.outputs.PACKAGES }}"
          echo "Building component SINGULARITY_CE ${{ steps.versions.outputs.SINGULARITY_CE }}"
      - name: Delete outdated image and component
        run: |-
          pip install aws-parallelcluster
          set -x
          IMAGE_ARN=$(pcluster list-images --image-status FAILED | jq -r '.images[] | select( .imageId == "${{ steps.versions.outputs.AMI }}") | .imageId')
          if [[ -z ${IMAGE_ARN} ]]
          then
            IMAGE_ARN=$(pcluster list-images --image-status AVAILABLE | jq -r '.images[] | select( .imageId == "${{ steps.versions.outputs.AMI }}") | .imageId')
          fi
          if [[ -n ${IMAGE_ARN} ]]
          then
            STACK=$(aws cloudformation list-stacks --no-paginate | jq -r '.StackSummaries[] | select(.StackStatus != "DELETE_COMPLETE") | select(.StackName == "${{ steps.versions.outputs.AMI }}")')
            pcluster delete-image -i ${{ steps.versions.outputs.AMI }}
            while [[ -n "${STACK}" ]]
              do
                sleep 10
                STACK=$(aws cloudformation list-stacks --no-paginate | jq -r '.StackSummaries[] | select(.StackStatus != "DELETE_COMPLETE") | select(.StackName == "${{ steps.versions.outputs.AMI }}")')
                STACK_STATUS=$(echo $STACK | jq -r .StackStatus)
                if [[ -n ${STACK_STATUS} && "${STACK_STATUS}" != "DELETE_IN_PROGRESS" ]]
                then
                  echo "Stack in status ${STACK_STATUS}"
                  exit 1
                fi
            done
          fi
          COMPONENT_ARN=$(aws imagebuilder list-components --no-paginate | jq -r '.componentVersionList[] | select(.name == "configure-ami") | select(.version == "${{ steps.versions.outputs.CONFIGURE_AMI }}" ) | .arn')
          if [[ -n ${COMPONENT_ARN} ]]
          then
            aws imagebuilder delete-component --component-build-version-arn=arn:aws:imagebuilder:${{ vars.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:component/configure-ami/${{ steps.versions.outputs.CONFIGURE_AMI }}/1
          fi
          COMPONENT_ARN=$(aws imagebuilder list-components --no-paginate | jq -r '.componentVersionList[] | select(.name == "neurodamus-toolchain") | select(.version == "${{ steps.versions.outputs.NEURODAMUS_TOOLCHAIN }}" ) | .arn')
          if [[ -n ${COMPONENT_ARN} ]]
          then
            aws imagebuilder delete-component --component-build-version-arn=arn:aws:imagebuilder:${{ vars.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:component/neurodamus-toolchain/${{ steps.versions.outputs.NEURODAMUS_TOOLCHAIN }}/1
          fi
          COMPONENT_ARN=$(aws imagebuilder list-components --no-paginate | jq -r '.componentVersionList[] | select(.name == "packages") | select(.version == "${{ steps.versions.outputs.PACKAGES }}" ) | .arn')
          if [[ -n ${COMPONENT_ARN} ]]
          then
            aws imagebuilder delete-component --component-build-version-arn=arn:aws:imagebuilder:${{ vars.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:component/packages/${{ steps.versions.outputs.PACKAGES }}/1
          fi
          # COMPONENT_ARN=$(aws imagebuilder list-components --no-paginate | jq -r '.componentVersionList[] | select(.name == "singularity-ce") | select(.version == "${{ steps.versions.outputs.SINGULARITY_CE }}" ) | .arn')
          # if [[ -n ${COMPONENT_ARN} ]]
          # then
          #  aws imagebuilder delete-component --component-build-version-arn=arn:aws:imagebuilder:${{ vars.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:component/singularity-ce/${{ steps.versions.outputs.SINGULARITY_CE }}/1
          # fi
      - name: Create new component and image
        run: |-
          aws imagebuilder create-component --name "configure-ami" --semantic-version "${{ steps.versions.outputs.CONFIGURE_AMI }}" --platform "Linux" --tags "SBO_Billing=hpc:parallelcluster" --uri "s3://${{ secrets.BUCKET_NAME }}/components/configure-ami.yaml"
          aws imagebuilder create-component --name "neurodamus-toolchain" --semantic-version "${{ steps.versions.outputs.NEURODAMUS_TOOLCHAIN }}" --platform "Linux" --tags "SBO_Billing=hpc:parallelcluster" --uri "s3://${{ secrets.BUCKET_NAME }}/components/neurodamus-toolchain.yaml"
          aws imagebuilder create-component --name "packages" --semantic-version "${{ steps.versions.outputs.PACKAGES }}" --platform "Linux" --tags "SBO_Billing=hpc:parallelcluster" --uri "s3://${{ secrets.BUCKET_NAME }}/components/packages.yaml"
          # aws imagebuilder create-component --name "singularity-ce" --semantic-version "${{ steps.versions.outputs.SINGULARITY_CE }}" --platform "Linux" --tags "SBO_Billing=hpc:parallelcluster" --uri "s3://${{ secrets.BUCKET_NAME }}/components/singularity-ce.yaml"
          pcluster build-image --image-configuration ami/ami-config-neurodamus.yaml --image-id ${{ steps.versions.outputs.AMI }}
