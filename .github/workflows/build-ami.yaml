---
name: Build an AMI
permissions:
  id-token: write
  contents: read
on:
  push:
  workflow_dispatch:
jobs:
  build-ami:
    runs-on: ubuntu-latest
    environment: sandbox-hpc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_AMI_DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Upload component definitions
        run: |-
          aws s3 cp --recursive --exclude '*' --include '*yaml' ami/components/ s3://${{ secrets.BUCKET_NAME }}/components/
      - name: Install jq
        run: |-
          sudo apt-get update
          sudo apt-get install -q -y jq
      - name: Delete outdated image and component
        run: |-
          pip install aws-parallelcluster
          set -x
          IMAGE_ARN=$(pcluster list-images --image-status FAILED | jq -r '.images[] | select( .imageId == "obi-parallelcluster-neurodamus-ami-al2023-v1") | .imageId')
          if [[ -n ${IMAGE_ARN} ]]
          then
            STACK=$(aws cloudformation list-stacks --no-paginate | jq -r '.StackSummaries[] | select(.StackStatus != "DELETE_COMPLETE") | select(.StackName == "obi-parallelcluster-neurodamus-ami-al2023-v1")')
            pcluster delete-image -i obi-parallelcluster-neurodamus-ami-al2023-v1
            while [[ -n "${STACK}" ]]
              do
                sleep 2
                STACK=$(aws cloudformation list-stacks --no-paginate | jq -r '.StackSummaries[] | select(.StackStatus != "DELETE_COMPLETE") | select(.StackName == "obi-parallelcluster-neurodamus-ami-al2023-v1")')
                STACK_STATUS=$(echo $STACK | jq -r .StackStatus)
                if [ "${STACK_STATUS}" == "DELETE_FAILED" ]
                then
                  echo "Stack in status ${STACK_STATUS}"
                  exit 1
                fi
            done
          fi
          COMPONENT_ARN=$(aws imagebuilder list-components --no-paginate | jq -r '.componentVersionList[] | select(.name == "neurodamus-toolchain") | select(.version == "0.0.1" ) | .arn')
          if [[ -n ${COMPONENT_ARN} ]]
          then
            aws imagebuilder delete-component --component-build-version-arn=arn:aws:imagebuilder:${{ vars.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:component/neurodamus-toolchain/0.0.1/1
          fi
          COMPONENT_ARN=$(aws imagebuilder list-components --no-paginate | jq -r '.componentVersionList[] | select(.name == "packages") | select(.version == "1.0.8" ) | .arn')
          if [[ -n ${COMPONENT_ARN} ]]
          then
            aws imagebuilder delete-component --component-build-version-arn=arn:aws:imagebuilder:${{ vars.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:component/packages/1.0.8/1
          fi
      - name: Create new component and image
        run: |-
          aws imagebuilder create-component --name "packages" --semantic-version "1.0.8" --platform "Linux" --tags "SBO_Billing=hpc:parallelcluster" --uri "s3://${{ secrets.BUCKET_NAME }}/components/packages.yaml"
          aws imagebuilder create-component --name "neurodamus-toolchain" --semantic-version "0.0.1" --platform "Linux" --tags "SBO_Billing=hpc:parallelcluster" --uri "s3://${{ secrets.BUCKET_NAME }}/components/neurodamus-toolchain.yaml"
          pcluster build-image --image-configuration ami/ami-config-neurodamus.yaml --image-id obi-parallelcluster-neurodamus-ami-al2023-v1
